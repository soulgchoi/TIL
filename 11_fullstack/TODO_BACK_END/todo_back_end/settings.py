"""
Django settings for todo_back_end project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'sg-^-d3tdzn!kkm!qw4a6p#8^q4i4*$s8p=wo&%o8)d)k@e@b5'
# 이게 암호화할 우리의 salt

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# REST_framework 설정
REST_FRAMEWORK = {
		# 로그인 여부를 확인하는 클래스
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
		# 인증 여부를 확인하는 클래스
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

# JWT 설정
JWT_AUTH = {
		# JWT를 encrypt함.절대 외부 노출 금지, default는 settings.SECRET_KEY
    'JWT_SECRET_KEY': SECRET_KEY,
		# 토큰 해싱 알고리즘(HMAC using SHA-256 hash algorithm (default)
    'JWT_ALGORITHM': 'HS256',
		# 토큰 갱신 허용 여부
    'JWT_ALLOW_REFRESH': True,
		# 1주일간 유효한 토큰 - default는 5분
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
		# 28일 마다 토큰이 갱신(유효 기간 연장시)
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=28),
}
# JWT 토큰은 헤더/페이로드(데이터)/시그니처(인증) 부분으로 이루어진다.
# 토큰의 길이가 길다.
# JSON 에 실어 보내서 vue 로 받을 예정


# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'corsheaders',  # CORS 관련 설정
    'django_extensions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'todos',
    'accounts',
]

MIDDLEWARE = [
    # CorsMiddleware should be placed as high as possible especially
    # before any middleware that can generate responses such as
    # Django's CommonMiddleware
    # 미들웨어에 요청이 들어가면, 다 한번씩 들어갔다가 나옴, 그 다음에 요청 분석해서 urls.py 로
    # 모든 요청이 위에서 아래로 흘러갔다 나오는 것
    # 하나라도 막혀있으면 요청 X
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'todo_back_end.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'todo_back_end.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# 여기로 들어오는 요청 허락하겠다는 의미
# CORS_ORIGIN_WHITELIST = [
#     "http://127.0.0.1:8080"
# ]
CORS_ORIGIN_ALLOW_ALL = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

AUTH_USER_MODEL = 'accounts.User'
